{"remainingRequest":"/Users/catherineluse/Documents/workspace/unit-4/capstone-connect/Capstone-Connect/node_modules/babel-loader/lib/index.js!/Users/catherineluse/Documents/workspace/unit-4/capstone-connect/Capstone-Connect/node_modules/eslint-loader/index.js??ref--13-0!/Users/catherineluse/Documents/workspace/unit-4/capstone-connect/Capstone-Connect/src/store/modules/users.js","dependencies":[{"path":"/Users/catherineluse/Documents/workspace/unit-4/capstone-connect/Capstone-Connect/src/store/modules/users.js","mtime":1529522530571},{"path":"/Users/catherineluse/Documents/workspace/unit-4/capstone-connect/Capstone-Connect/node_modules/cache-loader/dist/cjs.js","mtime":1528441485530},{"path":"/Users/catherineluse/Documents/workspace/unit-4/capstone-connect/Capstone-Connect/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/Users/catherineluse/Documents/workspace/unit-4/capstone-connect/Capstone-Connect/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/catherineluse/Documents/workspace/unit-4/capstone-connect/Capstone-Connect/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\nimport api from '../../api/imgur';\nimport qs from 'qs';\nimport { router } from '../../main';\nimport axios from 'axios';\nvar state = {\n  users: [],\n  businesses: [],\n  students: [],\n  access_requests: [],\n  newUser: null\n};\nvar getters = {\n  allUsers: function allUsers(state) {\n    return state.users;\n  },\n  allBusinesses: function allBusinesses(state) {\n    return state.businesses;\n  },\n  allStudents: function allStudents(state) {\n    return state.students;\n  },\n  accessRequests: function accessRequests(state) {\n    return state.access_requests;\n  },\n  getNewUser: function getNewUser(state) {\n    return state.newUser;\n  }\n};\nvar mutations = {\n  setUsers: function setUsers(state, users) {\n    state.users = users;\n  },\n  setBusinesses: function setBusinesses(state, users) {\n    state.businesses = state.users.filter(function (ele) {\n      return ele[\"role\"] === \"business\";\n    });\n  },\n  setStudents: function setStudents(state, users) {\n    state.students = state.users.filter(function (ele) {\n      return ele[\"role\"] === \"students\";\n    });\n  },\n  setAccessRequests: function setAccessRequests(state, users) {\n    state.access_requests = state.users.filter(function (ele) {\n      return ele[\"is_approved\"] === false;\n    });\n  },\n  addUser: function addUser(state, newUser) {\n    state.users.push(newUser);\n  },\n  clear_new_user: function clear_new_user(state) {\n    state.newUser = null;\n  }\n};\nvar actions = {\n  fetchAllusers: function () {\n    var _fetchAllusers = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref) {\n      var rootState, commit, token, response;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              rootState = _ref.rootState, commit = _ref.commit;\n              token = rootState.auth.token;\n              _context.next = 4;\n              return axios.get('http://localhost:8000/admin/users').then(function (res) {\n                commit('setUsers', res.data);\n                commit('setStudents', res.data);\n                commit('setBusinesses', res.data);\n              }).catch(function (err) {\n                return console.log(err);\n              });\n\n            case 4:\n              response = _context.sent;\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function fetchAllusers(_x) {\n      return _fetchAllusers.apply(this, arguments);\n    };\n  }(),\n  addNewuser: function addNewuser(_ref2) {\n    var commit = _ref2.commit,\n        state = _ref2.state,\n        newUser = _ref2.newUser;\n\n    if (!state.newUser) {\n      return;\n    }\n\n    axios.post('/new_user', newUser).then(function () {\n      commit('adduser', newUser);\n    });\n  },\n  clearNewuser: function clearNewuser(_ref3) {\n    var commit = _ref3.commit;\n    commit('clear_new_user');\n  },\n  fetchAllOpenusers: function () {\n    var _fetchAllOpenusers = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2(_ref4) {\n      var rootState, commit, token, response;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              rootState = _ref4.rootState, commit = _ref4.commit;\n              token = rootState.auth.token;\n              _context2.next = 4;\n              return axios('http://localhost:8000/student/users').then(function (res) {\n                commit('setusers', res.data);\n              }).catch(function (err) {\n                return console.log(err);\n              });\n\n            case 4:\n              response = _context2.sent;\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function fetchAllOpenusers(_x2) {\n      return _fetchAllOpenusers.apply(this, arguments);\n    };\n  }(),\n  filterByRole: function filterByRole(_ref5, role) {\n    var rootState = _ref5.rootState,\n        commit = _ref5.commit;\n    var filtered = rootState.users.users.filter(function (ele) {\n      return ele.role_type.indexOf(role) !== -1;\n    });\n    commit('setusers', filtered);\n  },\n  filterById: function filterById(_ref6, id) {\n    var rootState = _ref6.rootState,\n        commit = _ref6.commit;\n    var user = rootState.users.users.filter(function (ele) {\n      return ele.user_id === id;\n    })[0];\n    console.log('filtering for ', user);\n    commit('setCurrentuser', user);\n  }\n};\nexport default {\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};",{"version":3,"sources":["src/store/modules/users.js"],"names":["api","qs","router","axios","state","users","businesses","students","access_requests","newUser","getters","allUsers","allBusinesses","allStudents","accessRequests","getNewUser","mutations","setUsers","setBusinesses","filter","ele","setStudents","setAccessRequests","addUser","push","clear_new_user","actions","fetchAllusers","rootState","commit","token","auth","get","then","res","data","catch","console","log","err","response","addNewuser","post","clearNewuser","fetchAllOpenusers","filterByRole","role","filtered","role_type","indexOf","filterById","id","user","user_id"],"mappings":"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","sourceRoot":"/Users/catherineluse/Documents/workspace/unit-4/capstone-connect/Capstone-Connect","sourcesContent":["import api from '../../api/imgur';\nimport qs from 'qs';\nimport { router } from '../../main';\nimport axios from 'axios';\n\n\nconst state = {\n  users: [],\n  businesses: [],\n  students: [],\n  access_requests: [],\n  newUser: null\n};\n\nconst getters = {\n    allUsers: function (state) {\n      return state.users;\n    },\n    allBusinesses: function (state) {\n      return state.businesses;\n    },\n    allStudents: function (state) {\n      return state.students;\n    },\n    accessRequests: function (state) {\n      return state.access_requests;\n    },\n    getNewUser: state => state.newUser\n};\n\nconst mutations = {\n  setUsers (state, users) {\n     state.users = users;\n  },\n  setBusinesses (state, users) {\n    state.businesses = state.users.filter(ele => ele[\"role\"] === \"business\");\n  },\n  setStudents (state, users) {\n    state.students = state.users.filter(ele => ele[\"role\"] === \"students\");\n  },\n  setAccessRequests (state, users) {\n    state.access_requests = state.users.filter(ele => ele[\"is_approved\"] === false);\n  },\n  addUser (state, newUser) {\n    state.users.push(newUser);\n  },\n  clear_new_user (state) {\n    state.newUser = null;\n  }\n};\n\nconst actions = {\n  async fetchAllusers ({ rootState, commit }) {\n     const { token } = rootState.auth;\n     const response = await axios.get('http://localhost:8000/admin/users')\n     .then(res => {\n       commit('setUsers', res.data);\n       commit('setStudents', res.data);\n       commit('setBusinesses', res.data);\n     })\n     .catch(err => console.log(err));\n\n  },\n  addNewuser ({ commit, state, newUser }){\n    if (!state.newUser){\n      return;\n    }\n    axios.post('/new_user', newUser)\n    .then( () => {\n      commit('adduser', newUser);\n    })\n  },\n  clearNewuser ({ commit }) {\n    commit('clear_new_user')\n  },\n  async fetchAllOpenusers ({ rootState, commit }) {\n     const { token } = rootState.auth;\n     const response = await axios('http://localhost:8000/student/users')\n     .then(res => {\n\n\n       commit('setusers', res.data)\n     })\n     .catch(err => console.log(err));\n\n  },\n  filterByRole ({rootState, commit}, role){\n    let filtered = rootState.users.users.filter(function(ele){\n      return ele.role_type.indexOf(role) !== -1;\n    })\n    commit('setusers', filtered)\n  },\n  filterById ({rootState, commit}, id){\n    let user = rootState.users.users.filter(function(ele){\n      return ele.user_id === id;\n    })[0];\n    console.log('filtering for ', user)\n    commit('setCurrentuser', user);\n  }\n\n}\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n}\n"]}]}